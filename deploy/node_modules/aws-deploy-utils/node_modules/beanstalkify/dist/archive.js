Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _q = require('q');

var _q2 = _interopRequireDefault(_q);

var _winston = require('winston');

var _winston2 = _interopRequireDefault(_winston);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

"use strict";

var Archive = (function () {
    /**
     * @param {string} filePath - The path of archive to deploy
     * @param {object} s3 - AWS SDK S3 service interface object
     * @param {object} elasticbeanstalk - AWS SDK S3 service interface object
     * @constructor
     */

    function Archive(filePath, s3, elasticbeanstalk) {
        _classCallCheck(this, Archive);

        this.elasticbeanstalk = elasticbeanstalk;
        this.s3 = s3;
        this.filePath = filePath;
        this.archiveName = _path2['default'].basename(filePath); // website-a-4543cbf.zip
        var baseName = _path2['default'].basename(filePath, _path2['default'].extname(filePath)).split('-'); // ['website', 'a', '4543cbf']
        this.version = baseName.pop(); // '4543cbf'
        this.appName = baseName.join('-'); // 'website-a'
    }

    _createClass(Archive, [{
        key: 'upload',
        value: function upload() {
            var _this = this;

            return this.alreadyUploaded().then(function (data) {
                if (data) {
                    return _winston2['default'].info(_this.version + 'is already uploaded.');
                } else {
                    return _this.doUpload();
                }
            });
        }
    }, {
        key: 'doUpload',
        value: function doUpload() {

            return this.createStorageLocation().then(this.uploadToS3.bind(this)).then(this.makeApplicationVersionAvailableToBeanstalk.bind(this));
        }
    }, {
        key: 'createStorageLocation',
        value: function createStorageLocation() {

            var defer = _q2['default'].defer();

            this.elasticbeanstalk.createStorageLocation(function (err, data) {

                if (err) {
                    defer.reject(err);
                } else {
                    defer.resolve(data.S3Bucket);
                }
            });

            return defer.promise;
        }
    }, {
        key: 'uploadToS3',
        value: function uploadToS3(bucket) {

            _winston2['default'].info('Uploading ' + this.archiveName + ' to bucket ' + bucket + '...');
            var defer = _q2['default'].defer();
            this.s3.putObject({
                Bucket: bucket,
                Key: this.archiveName,
                Body: _fs2['default'].readFileSync(this.filePath)
            }, function (err) {
                if (err) {
                    defer.reject(err);
                } else {
                    defer.resolve(bucket);
                }
            });
            return defer.promise;
        }
    }, {
        key: 'makeApplicationVersionAvailableToBeanstalk',
        value: function makeApplicationVersionAvailableToBeanstalk(bucket) {

            _winston2['default'].info('Making version ' + this.version + ' of ' + this.appName + ' available to Beanstalk...');
            var defer = _q2['default'].defer();
            this.elasticbeanstalk.createApplicationVersion({
                ApplicationName: this.appName,
                VersionLabel: this.version,
                SourceBundle: {
                    S3Bucket: bucket,
                    S3Key: this.archiveName
                },
                AutoCreateApplication: true
            }, function (err, data) {
                if (err) {
                    _winston2['default'].error(err.message);
                    defer.resolve(false);
                } else {
                    defer.resolve(data);
                }
            });

            return defer.promise;
        }
    }, {
        key: 'alreadyUploaded',
        value: function alreadyUploaded() {
            var defer = _q2['default'].defer();

            this.elasticbeanstalk.describeApplicationVersions({
                ApplicationName: this.appName,
                VersionLabels: [this.version]
            }, function (err, data) {
                if (err) {
                    defer.reject(err);
                } else {
                    if (data.ApplicationVersions.length > 1) {
                        defer.resolve(true);
                    } else {
                        defer.resolve(false);
                    }
                }
            });

            return defer.promise;
        }
    }]);

    return Archive;
})();

exports['default'] = Archive;
module.exports = exports['default'];
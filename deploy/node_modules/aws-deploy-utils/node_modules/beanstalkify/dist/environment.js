"use strict";
Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var q = require('q');
var winston = require('winston');
var async = require('async');

var POLL_INTERVAL = 5;
var STATUS_CHANGE_TIMEOUT = 1200;
var HEALTHY_TIMEOUT = 120;

var Environment = (function () {
    function Environment(archive, cname, stack, config, elasticbeanstalk) {
        _classCallCheck(this, Environment);

        this.archive = archive;
        this.name = cname;
        this.elasticbeanstalk = elasticbeanstalk;
        this.config = config;
        this.stack = stack;
    }

    _createClass(Environment, [{
        key: 'describeEnvironment',
        value: function describeEnvironment() {
            var defer = q.defer();

            this.elasticbeanstalk.describeEnvironments({
                EnvironmentNames: [this.name],
                IncludeDeleted: false
            }, function (err, data) {
                if (err) {
                    defer.reject(err);
                } else {
                    defer.resolve(data.Environments.shift());
                }
            });

            return defer.promise;
        }
    }, {
        key: 'status',
        value: function status() {
            return this.describeEnvironment().then(function (e) {
                if (e) {
                    return e.Status;
                } else {
                    return '';
                }
            });
        }

        /**
         * Assuming the archive has already been uploaded,
         * create a new environment with the app deployed onto the provided stack.
         * Attempts to use the first available cname in the cnames array.
         * @param {string} cname CNAME prefixes to try
         * @returns {promise} Promise
         */
    }, {
        key: 'create',
        value: function create(cname) {
            var _this = this;

            return this.checkDNSAvailability().then(function (availability) {

                if (!availability) {
                    throw 'DNS (' + _this.name + ') is not available';
                }

                var defer = q.defer();
                _this.elasticbeanstalk.createEnvironment({
                    ApplicationName: _this.archive.appName,
                    VersionLabel: _this.archive.version,
                    EnvironmentName: _this.name,
                    SolutionStackName: _this.stack,
                    OptionSettings: _this.config,
                    CNAMEPrefix: cname
                }, function (err, data) {
                    if (err) {
                        defer.reject(err);
                    } else {
                        defer.resolve(data);
                    }
                });
                return defer.promise;
            });
        }
    }, {
        key: 'checkDNSAvailability',
        value: function checkDNSAvailability() {
            winston.info('Check ' + this.name + ' availability');
            var defer = q.defer();
            this.elasticbeanstalk.checkDNSAvailability({
                CNAMEPrefix: this.name
            }, function (err, data) {
                if (err) {
                    defer.reject(err);
                } else {
                    defer.resolve(data.Available);
                }
            });
            return defer.promise;
        }
    }, {
        key: 'deploy',
        value: function deploy() {
            var defer = q.defer();
            this.elasticbeanstalk.updateEnvironment({
                VersionLabel: this.archive.version,
                EnvironmentName: this.name,
                OptionSettings: this.config
            }, function (err, data) {
                if (err) {
                    defer.reject(err);
                } else {
                    defer.resolve(data.Available);
                }
            });
            return defer.promise;
        }

        /**
         * Wait until status is not {oldStatus}
         * @param {string} oldStatus The old status of environment
         * @returns {promise} Promise
         */
    }, {
        key: 'waitUntilStatusIsNot',
        value: function waitUntilStatusIsNot(oldStatus) {
            var _this2 = this;

            var defer = q.defer();
            var timeLeft = STATUS_CHANGE_TIMEOUT;
            var status = null;
            winston.info('Waiting for ' + this.name + ' to finish ' + oldStatus.toLowerCase());
            async.whilst(function () {
                if (status === null) {
                    return true;
                } else if (timeLeft > 0 && status === oldStatus) {
                    return true;
                }
                return false;
            }, function (callback) {
                _this2.status().then(function (envStatus) {
                    process.stdout.write('.');
                    status = envStatus;
                    timeLeft = timeLeft - POLL_INTERVAL;
                    setTimeout(callback, POLL_INTERVAL * 1000);
                })['catch'](callback).done();
            }, function (err) {
                if (err) {
                    return defer.reject(err);
                } else {
                    return defer.resolve(status);
                }
            });
            return defer.promise;
        }
    }, {
        key: 'waitUtilHealthy',
        value: function waitUtilHealthy() {
            var _this3 = this;

            var defer = q.defer();
            var timeLeft = HEALTHY_TIMEOUT;
            var healthy = false;
            winston.info('Waiting until ' + this.name + ' is healthy');
            async.whilst(function () {
                if (timeLeft > 0 && healthy === false) {
                    return true;
                } else {
                    return false;
                }
            }, function (callback) {
                _this3.describeEnvironment().then(function (data) {
                    process.stdout.write('.');
                    healthy = data.Health === 'Green';
                    timeLeft = timeLeft - POLL_INTERVAL;
                    setTimeout(callback, POLL_INTERVAL * 1000);
                })['catch'](callback).done();
            }, function (err) {
                if (err) {
                    return defer.reject(err);
                } else if (healthy === false) {
                    return defer.reject(new Error(_this3.name + ' is not healthy'));
                } else {
                    return defer.resolve(healthy);
                }
            });
            return defer.promise;
        }
    }]);

    return Environment;
})();

exports['default'] = Environment;
module.exports = exports['default'];
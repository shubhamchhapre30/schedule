"use strict";
Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var Archive = require('./archive');
var Environment = require('./environment');
var deploymentInfo = require('./deployment-info');
var AWS = require('aws-sdk');
var winston = require('winston');
var q = require('q');

var Application = (function () {
    /**
     * @param {object} credentials AWS credentials {accessKeyId, secretAccessKey, region}
     * @constructor
     */

    function Application(credentials) {
        _classCallCheck(this, Application);

        // Make debugging easy
        winston.level = 'info';
        q.longStackSupport = true;

        // AWS Services
        this.s3 = new AWS.S3(credentials);
        this.elasticbeanstalk = new AWS.ElasticBeanstalk(credentials);
    }

    /**
     * @param {object} args - Arguments
     * @param {string} args.archiveFilePath - The path of archive to deploy (e.g. AppName-version.zip)
     * @param {string} args.environmentName - Environment to provision (e.g. my-awesome-app)
     * @param {string} args.awsStackName - Stack to provision (e.g. '64bit Amazon Linux 2015.03 v2.0.0 running Node.js')
     * @param {object} args.beanstalkConfig - Configuration overrides for the environment (optional)
     * @returns {promise} Promise
     */

    _createClass(Application, [{
        key: 'deploy',
        value: function deploy(args) {
            var archivePath = args.archiveFilePath;
            var cname = args.environmentName;
            var stack = args.awsStackName;
            var config = args.beanstalkConfig;

            var archive = new Archive(archivePath, this.s3, this.elasticbeanstalk);
            var environment = new Environment(archive, cname, stack, config, this.elasticbeanstalk);

            return archive.upload().then(function () {
                return environment.status().then(function (env) {
                    if (!env) {
                        winston.info('Create stack ' + stack + ' for ' + archive.appName + '-' + archive.version);
                        return environment.create(cname).then(environment.waitUntilStatusIsNot.bind(environment, 'Launching'));
                    } else {

                        winston.info('Deploying ' + archive.version + ' to ' + environment.name + '...');
                        return environment.deploy().then(environment.waitUntilStatusIsNot.bind(environment, 'Updating'));
                    }
                });
            }).then(environment.waitUtilHealthy.bind(environment)).then(deploymentInfo.bind(null, archive, environment));
        }
    }]);

    return Application;
})();

exports['default'] = Application;
module.exports = exports['default'];